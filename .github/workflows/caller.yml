name: Call reusable workflow

env:
  dev: NONPROD_BACKEND_CONFIG
  prd: PROD_SUBSCRIPTION_ID
on:
  workflow_dispatch:
  push:
    branches:
       - master
  
jobs:

  changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            sit2-pdp:
              - 'akamai/sit2-pdp.tfvars'
            sit2-plp:
              - 'akamai/sit2-plp.tfvars'   
    outputs:
      apps-changed: ${{steps.filter.outputs.changes }}


  prepare:
    needs: [changes]
    if: |
      needs.changes.outputs.apps-changed != '' &&
      toJson(fromJson(needs.changes.outputs.apps-changed)) != '[]' &&
      contains(needs.changes.outputs.apps-changed, 'sit2')
    strategy:
      matrix:
        apps: ${{ fromJSON(needs.changes.outputs.apps-changed) }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          set -x
          echo ${{ matrix.apps }}
          echo "${{ matrix.apps }}=$(echo ${{ matrix.apps }} | tr '-' '_')" >> $GITHUB_OUTPUT
              
  

#  get-config:
#    needs: [changes,prepare]
#    if: |
#      needs.changes.outputs.apps-changed != '' &&
#      toJson(fromJson(needs.changes.outputs.apps-changed)) != '[]' &&
#      contains(needs.changes.outputs.apps-changed, 'sit2')
#    strategy:
#      matrix:
#        apps: ${{ fromJSON(needs.changes.outputs.apps-changed) }}
#    runs-on: ubuntu-latest
#    steps:
#      - run: |
#          set -x
#          echo ${{ matrix.apps }}
#          echo "sit2 pdp is: ${{ needs.prepare.outputs.sit2-pdp}}"
#          echo "sit2 plp is: ${{ needs.prepare.outputs.sit2-plp}}"


  sit2:
    needs: [changes,prepare]
    if: |
      needs.changes.outputs.apps-changed != '' &&
      toJson(fromJson(needs.changes.outputs.apps-changed)) != '[]' &&
      contains(needs.changes.outputs.apps-changed, 'sit2')
    uses:  hybridaccess/shared-workflow/.github/workflows/called.yml@master
    strategy:
      matrix:
        apps: ${{ fromJSON(needs.changes.outputs.apps-changed) }}
    with:
      name: test
      subscription_id: ${{ vars.SUBSCRIPTION_ID }}
      backend_config: ${{ vars[format('{0}_BACKEND_CONFIG','matrix.apps')] }}
    secrets:
       SUBSCRIPTION_ID: ${{ secrets.needs.prepare.outputs.env-dev }}
       BACKEND_CONFIG: ${{ secrets[format('{0}_BACKEND_CONFIG',needs.prepare.outputs['matrix.apps'])] }}



