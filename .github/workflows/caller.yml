name: Call reusable workflow

env:
  dev: NONPROD_BACKEND_CONFIG
  prd: PROD_SUBSCRIPTION_ID
on:
  workflow_dispatch:
  push:
    branches:
       - master
  
jobs:

  changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            sit2-pdp:
              - 'akamai/sit2-pdp.tfvars'
            sit2-plp:
              - 'akamai/sit2-plp.tfvars'   
    outputs:
      apps-changed: ${{steps.filter.outputs.changes }}

  prepare:
    needs: [changes]
    runs-on: ubuntu-latest
    steps:
      - name: get-env
        id: getenv
        run: |
          set -x
          echo "dev=NONPROD_BACKEND_CONFIG" >> "$GITHUB_OUTPUT"
          echo "prd=PROD_BACKEND_CONFIG" >> "$GITHUB_OUTPUT"
    outputs:
      env-dev: ${{ steps.getenv.outputs.dev }}
      env-prd: ${{ steps.getenv.outputs.prd }}

  sit2:
    needs: [changes,prepare]
    if: |
      needs.changes.outputs.apps-changed != '' &&
      toJson(fromJson(needs.changes.outputs.apps-changed)) != '[]' &&
      contains(needs.changes.outputs.apps-changed, 'sit2')
    strategy:
      matrix:
        apps: ${{ fromJSON(needs.changes.outputs.apps-changed) }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          set -x
          echo "1:"
          echo ${{ matrix.apps }}
          echo "2:"
          echo ${{ matrix.apps[0] }}
          echo "3:"
          echo ${{ matrix.apps['sit2-plp'] }}          
          echo "4:"          
          echo "${{ needs.changes.outputs.apps-changed }}"
          echo "5:"
          echo ${{ matrix.apps.*.sit2-plp }}
          echo "6:"
          echo ${{ join(fromJson(needs.changes.outputs.apps-changed), ' ') }}
          files=$(echo ${{ join(fromJson(needs.changes.outputs.apps-changed), ' ') }})
          # for val in ${{ join(fromJson(needs.changes.outputs.apps-changed), ' ') }}; do export $val="$val" && echo $val; done
          echo "7:"
          echo "${{ needs.prepare.outputs.env-dev }}"
          echo "${{ needs.prepare.outputs.env-prd }}"
  
  
  remote:
    needs: [changes,prepare]
    uses:  hybridaccess/shared-workflow/.github/workflows/called.yml@master
    with:
      name: test
    secrets:
      SUBSCRIPTION_ID: ${{ secrets.needs.prepare.outputs.env-dev }}
      # BACKEND_CONFIG: $(echo "${{ secrets['env.prd'] }}")
      BACKEND_CONFIG: ${{ format('secrets. {0}', needs.prepare.outputs.env-prd ) }}


